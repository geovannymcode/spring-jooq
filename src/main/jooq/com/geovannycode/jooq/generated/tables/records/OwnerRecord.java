/*
 * This file is generated by jOOQ.
 */
package com.geovannycode.jooq.generated.tables.records;


import com.geovannycode.jooq.generated.tables.Owner;
import com.geovannycode.jooq.generated.tables.pojos.JooqOwner;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OwnerRecord extends UpdatableRecordImpl<OwnerRecord> implements Record3<Long, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.owner.ownerid</code>.
     */
    public void setOwnerid(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.owner.ownerid</code>.
     */
    public Long getOwnerid() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.owner.firstname</code>.
     */
    public void setFirstname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.owner.firstname</code>.
     */
    public String getFirstname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.owner.lastname</code>.
     */
    public void setLastname(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.owner.lastname</code>.
     */
    public String getLastname() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Owner.OWNER.OWNERID;
    }

    @Override
    public Field<String> field2() {
        return Owner.OWNER.FIRSTNAME;
    }

    @Override
    public Field<String> field3() {
        return Owner.OWNER.LASTNAME;
    }

    @Override
    public Long component1() {
        return getOwnerid();
    }

    @Override
    public String component2() {
        return getFirstname();
    }

    @Override
    public String component3() {
        return getLastname();
    }

    @Override
    public Long value1() {
        return getOwnerid();
    }

    @Override
    public String value2() {
        return getFirstname();
    }

    @Override
    public String value3() {
        return getLastname();
    }

    @Override
    public OwnerRecord value1(Long value) {
        setOwnerid(value);
        return this;
    }

    @Override
    public OwnerRecord value2(String value) {
        setFirstname(value);
        return this;
    }

    @Override
    public OwnerRecord value3(String value) {
        setLastname(value);
        return this;
    }

    @Override
    public OwnerRecord values(Long value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OwnerRecord
     */
    public OwnerRecord() {
        super(Owner.OWNER);
    }

    /**
     * Create a detached, initialised OwnerRecord
     */
    public OwnerRecord(Long ownerid, String firstname, String lastname) {
        super(Owner.OWNER);

        setOwnerid(ownerid);
        setFirstname(firstname);
        setLastname(lastname);
    }

    /**
     * Create a detached, initialised OwnerRecord
     */
    public OwnerRecord(JooqOwner value) {
        super(Owner.OWNER);

        if (value != null) {
            setOwnerid(value.getOwnerid());
            setFirstname(value.getFirstname());
            setLastname(value.getLastname());
        }
    }
}
