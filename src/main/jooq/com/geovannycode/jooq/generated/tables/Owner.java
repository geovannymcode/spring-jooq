/*
 * This file is generated by jOOQ.
 */
package com.geovannycode.jooq.generated.tables;


import com.geovannycode.jooq.generated.Keys;
import com.geovannycode.jooq.generated.Public;
import com.geovannycode.jooq.generated.tables.records.OwnerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Owner extends TableImpl<OwnerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.owner</code>
     */
    public static final Owner OWNER = new Owner();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OwnerRecord> getRecordType() {
        return OwnerRecord.class;
    }

    /**
     * The column <code>public.owner.ownerid</code>.
     */
    public final TableField<OwnerRecord, Long> OWNERID = createField(DSL.name("ownerid"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.owner.firstname</code>.
     */
    public final TableField<OwnerRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.owner.lastname</code>.
     */
    public final TableField<OwnerRecord, String> LASTNAME = createField(DSL.name("lastname"), SQLDataType.VARCHAR(50), this, "");

    private Owner(Name alias, Table<OwnerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Owner(Name alias, Table<OwnerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.owner</code> table reference
     */
    public Owner(String alias) {
        this(DSL.name(alias), OWNER);
    }

    /**
     * Create an aliased <code>public.owner</code> table reference
     */
    public Owner(Name alias) {
        this(alias, OWNER);
    }

    /**
     * Create a <code>public.owner</code> table reference
     */
    public Owner() {
        this(DSL.name("owner"), null);
    }

    public <O extends Record> Owner(Table<O> child, ForeignKey<O, OwnerRecord> key) {
        super(child, key, OWNER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<OwnerRecord, Long> getIdentity() {
        return (Identity<OwnerRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OwnerRecord> getPrimaryKey() {
        return Keys.OWNER_PKEY;
    }

    @Override
    public Owner as(String alias) {
        return new Owner(DSL.name(alias), this);
    }

    @Override
    public Owner as(Name alias) {
        return new Owner(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Owner rename(String name) {
        return new Owner(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Owner rename(Name name) {
        return new Owner(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
